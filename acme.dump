/Volumes/cs/Programming/Go/NEA
/mnt/font/GoMono/15a/font
/nix/store/m9nd7prfkqj350h0avy0diz3sn9h3f7d-plan9port-2021-10-19/plan9/font/lucm/unicode.9.font
  0.0000000  48.9583333
w Newcol Kill Putall Dump ./acme.dump Exit 
c          0 New Cut Paste Snarf Sort Zerox Delcol 
c          1 New Cut Paste Snarf Sort Zerox Delcol win rc
f          0          22         568         568   1.9948849 
         22          64         950           0           0 /Volumes/cs/Programming/Go/NEA/main.go Del Snarf Undo | Look Get
F          0           2         933         933  94.4757033        1646 
         26         100        1646           0           1 /Volumes/cs/Programming/Go/NEA/usermod.go Del Snarf Undo Put | Look Get Edit s,password,u.Password,g
package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"

	_ "github.com/mattn/go-sqlite3"
)

type User struct {
	Username  string
	Password  string
	Privilege int
	Errors    map[string]string
}

func (user *User) validateUser() bool {
	user.Errors = make(map[string]string)
	if strings.TrimSpace(user.Username) == "" {
		user.Errors["username"] = "Please enter a username"
	}
	if strings.TrimSpace(user.Password) == "" {
		user.Errors["username"] = "Please enter a password"
	}
	return len(user.Errors) == 0
}

func userCreateHandler(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		fmt.Fprintf(w, "ParseForm() err: %v", err)
		return
	}
	priv, err := strconv.Atoi(r.FormValue("privilege"))
	if err != nil {
		fmt.Fprintf(w, "Atoi err: %v. Enter a valid integer.", err)
	}
	u := User{
		Username:  r.FormValue("username"),
		id:  	   r.FormValue("id"),
		Privilege: priv,
	}
	u.validateUser()
	rdb, _ := sql.Open("sqlite3", "./EPOS.db")
	defer rdb.Close()
	log.Printf("POST request (Create User) recieved (%s)", r.RemoteAddr)
	createUser(rdb, u.Username, u.Password, u.Privilege)
	fmt.Fprintf(w, "success")
}

func createUser(db *sql.DB, username string, password string, privilege int) {
	log.Println("Attempting creation of new user record.")
	insertUserStatement := `INSERT INTO users(username, password, privilege) VALUES (?,?,?)`
	statement, err := db.Prepare(insertUserStatement)
	if err != nil {
		log.Fatalln(err.Error())
	}
	_, err = statement.Exec(username, password)
	if err != nil {
		log.Fatalln(err.Error())
	}
	log.Printf("User %s created successfully", username)
}
e          1           0           0           0   1.9948849 
          4          60     6260209           0           1 /Volumes/cs/Programming/Go/NEA/-mirai Del Snarf | Look  Send
/Volumes/cs/Programming/Go/NEA/
win rc -l
f          1          77         295         295  31.6624041 
         77          68         704           0           0 /Volumes/cs/Programming/Go/NEA/http-handle.go Del Snarf Undo | Look 
e          1           0           0           0  94.4757033 
         40          60       92347           0           1 /Volumes/cs/Programming/Go/NEA/-mirai Del Snarf | Look  Send
/Volumes/cs/Programming/Go/NEA/
win rc
